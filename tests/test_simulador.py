# Importamos el m√≥dulo unittest para crear pruebas autom√°ticas
import time

# Importamos la funci√≥n que vamos a probar del m√≥dulo taximetro
from taximetro import calcular_tarifa

class SimuladorTaxi:
    """
    Clase que simula el comportamiento de un tax√≠metro.
    Esta clase permite aceptar comandos,
    Permite controlar el taxi con comandos simples ('start', 'move', 'wait 1', etc.),
    facilitando as√≠ la escritura de tests autom√°ticos.
    """

    def __init__(self):
        # Variables internas que almacenan el estado del taxi
        self.en_movimiento = False
        self.tarifa_total = 0.0
        self.iniciado = False
        self.inicio = None

    def run(self, comando):
        """
        Ejecuta un comando para simular una acci√≥n del taxi.
        """

        comando = comando.lower()  # Asegura que el comando sea en min√∫sculas

        if comando == "start":
            if self.iniciado:
                return "‚ùå El trayecto ya ha sido iniciado."  # No se puede volver a iniciar
            self.iniciado = True
            self.inicio = time.time()  # Guardamos el momento del inicio
            return "‚úÖ Trayecto iniciado correctamente."

        elif comando == "move":
            if not self.iniciado:
                return "‚ùå Error: inicia el trayecto antes de mover el taxi."
            self.en_movimiento = True
            return "‚û°Ô∏è Taxi ahora en movimiento."

        elif comando == "stop":
            if not self.iniciado:
                return "‚ùå Error: no puedes parar si el trayecto no ha comenzado."
            self.en_movimiento = False
            return "üÖøÔ∏è Taxi ahora est√° parado."

        elif comando == "wait 1":
            # Simula 1 segundo de espera con time.sleep()
            # y calcula la tarifa acumulada en ese segundo
            time.sleep(1)
            duracion = 1
            self.tarifa_total += calcular_tarifa(duracion, self.en_movimiento)
            return f"‚è±Ô∏è 1 segundo registrado. Tarifa actual: {self.tarifa_total:.2f} ‚Ç¨"

        elif comando == "end":
            if not self.iniciado:
                return "‚ùå No hay trayecto en curso para finalizar."
            self.iniciado = False
            return f"üõë Trayecto finalizado. Tarifa total: {self.tarifa_total:.2f} ‚Ç¨"

        elif comando == "quit":
            return "üëã Saliendo del simulador."

        else:
            return "‚ùì Comando no reconocido."